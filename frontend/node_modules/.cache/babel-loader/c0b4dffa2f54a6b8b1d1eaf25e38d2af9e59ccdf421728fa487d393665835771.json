{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n\n  // Ensure headers object exists\n  if (!config.headers) {\n    config.headers = {};\n  }\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  // Handle FormData\n  if (config.data instanceof FormData) {\n    config.headers['Content-Type'] = 'multipart/form-data';\n  }\n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$config, _error$config2, _error$response, _error$response2, _error$response2$data;\n  console.error('API Error:', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message\n  });\n  throw error;\n});\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  signup: async credentials => {\n    const response = await api.post('/auth/signup', credentials);\n    return response.data;\n  },\n  getUser: async () => {\n    const response = await api.get('/auth/user');\n    return response.data;\n  }\n};\nexport const blogAPI = {\n  getBlogs: async (page = 1, limit = 10) => {\n    const response = await api.get(`/blogs?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n  getBlog: async id => {\n    const response = await api.get(`/blogs/${id}`);\n    return response.data;\n  },\n  createBlog: async blogData => {\n    try {\n      const response = await api.post('/blogs', blogData, {\n        headers: {\n          'Content-Type': blogData instanceof FormData ? 'multipart/form-data' : 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error in createBlog:', error);\n      throw error;\n    }\n  },\n  updateBlog: async (id, blogData) => {\n    try {\n      const response = await api.put(`/blogs/${id}`, blogData, {\n        headers: {\n          'Content-Type': blogData instanceof FormData ? 'multipart/form-data' : 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error in updateBlog:', error);\n      throw error;\n    }\n  },\n  deleteBlog: async id => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication token not found');\n      }\n      const response = await api.delete(`/blogs/${id}`, {\n        headers: {\n          'x-auth-token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error('Error in deleteBlog:', {\n        id,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message,\n        status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status\n      });\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","data","FormData","response","error","_error$config","_error$config2","_error$response","_error$response2","_error$response2$data","console","url","method","status","message","authAPI","login","credentials","post","signup","getUser","get","blogAPI","getBlogs","page","limit","getBlog","id","createBlog","blogData","updateBlog","put","deleteBlog","Error","delete","_error$response3","_error$response4"],"sources":["C:/Users/STUDIO PC/OneDrive/Desktop/OmnifyProject/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if it exists\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  // Ensure headers object exists\r\n  if (!config.headers) {\r\n    config.headers = {};\r\n  }\r\n\r\n  if (token) {\r\n    config.headers['x-auth-token'] = token;\r\n  }\r\n\r\n  // Handle FormData\r\n  if (config.data instanceof FormData) {\r\n    config.headers['Content-Type'] = 'multipart/form-data';\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', {\r\n      url: error.config?.url,\r\n      method: error.config?.method,\r\n      status: error.response?.status,\r\n      message: error.response?.data?.message || error.message,\r\n    });\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport const authAPI = {\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  signup: async (credentials) => {\r\n    const response = await api.post('/auth/signup', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  getUser: async () => {\r\n    const response = await api.get('/auth/user');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const blogAPI = {\r\n  getBlogs: async (page = 1, limit = 10) => {\r\n    const response = await api.get(`/blogs?page=${page}&limit=${limit}`);\r\n    return response.data;\r\n  },\r\n\r\n  getBlog: async (id) => {\r\n    const response = await api.get(`/blogs/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createBlog: async (blogData) => {\r\n    try {\r\n      const response = await api.post('/blogs', blogData, {\r\n        headers: {\r\n          'Content-Type': blogData instanceof FormData ? 'multipart/form-data' : 'application/json'\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in createBlog:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateBlog: async (id, blogData) => {\r\n    try {\r\n      const response = await api.put(`/blogs/${id}`, blogData, {\r\n        headers: {\r\n          'Content-Type': blogData instanceof FormData ? 'multipart/form-data' : 'application/json'\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in updateBlog:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteBlog: async (id) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('Authentication token not found');\r\n      }\r\n\r\n      const response = await api.delete(`/blogs/${id}`, {\r\n        headers: {\r\n          'x-auth-token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in deleteBlog:', {\r\n        id,\r\n        error: error.response?.data || error.message,\r\n        status: error.response?.status\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}