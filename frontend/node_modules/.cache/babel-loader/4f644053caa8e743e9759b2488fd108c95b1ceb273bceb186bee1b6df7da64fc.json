{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers['x-auth-token'] = token;\n  }\n  // Remove Content-Type header if FormData is being sent\n  if (config.data instanceof FormData) {\n    config.headers['Content-Type'] = 'multipart/form-data';\n  }\n  return config;\n});\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  signup: async credentials => {\n    const response = await api.post('/auth/signup', credentials);\n    return response.data;\n  },\n  getUser: async () => {\n    const response = await api.get('/auth/user');\n    return response.data;\n  }\n};\nexport const blogAPI = {\n  getBlogs: async (page = 1, limit = 10) => {\n    const response = await api.get(`/blogs?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n  getBlog: async id => {\n    const response = await api.get(`/blogs/${id}`);\n    return response.data;\n  },\n  createBlog: async blogData => {\n    const response = await api.post('/blogs', blogData);\n    return response.data;\n  },\n  updateBlog: async (id, blogData) => {\n    const response = await api.put(`/blogs/${id}`, blogData);\n    return response.data;\n  },\n  deleteBlog: async id => {\n    const response = await api.delete(`/blogs/${id}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","data","FormData","authAPI","login","credentials","response","post","signup","getUser","get","blogAPI","getBlogs","page","limit","getBlog","id","createBlog","blogData","updateBlog","put","deleteBlog","delete"],"sources":["C:/Users/STUDIO PC/OneDrive/Desktop/OmnifyProject/frontend/src/services/api.ts"],"sourcesContent":["import axios, { InternalAxiosRequestConfig } from 'axios';\r\nimport { LoginCredentials, SignupCredentials, BlogFormData } from '../types';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if it exists\r\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token && config.headers) {\r\n    config.headers['x-auth-token'] = token;\r\n  }\r\n  // Remove Content-Type header if FormData is being sent\r\n  if (config.data instanceof FormData) {\r\n    config.headers['Content-Type'] = 'multipart/form-data';\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const authAPI = {\r\n  login: async (credentials: LoginCredentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  signup: async (credentials: SignupCredentials) => {\r\n    const response = await api.post('/auth/signup', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  getUser: async () => {\r\n    const response = await api.get('/auth/user');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const blogAPI = {\r\n  getBlogs: async (page = 1, limit = 10) => {\r\n    const response = await api.get(`/blogs?page=${page}&limit=${limit}`);\r\n    return response.data;\r\n  },\r\n\r\n  getBlog: async (id: string) => {\r\n    const response = await api.get(`/blogs/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createBlog: async (blogData: BlogFormData | FormData) => {\r\n    const response = await api.post('/blogs', blogData);\r\n    return response.data;\r\n  },\r\n\r\n  updateBlog: async (id: string, blogData: BlogFormData | FormData) => {\r\n    const response = await api.put(`/blogs/${id}`, blogData);\r\n    return response.data;\r\n  },\r\n\r\n  deleteBlog: async (id: string) => {\r\n    const response = await api.delete(`/blogs/${id}`);\r\n    return response.data;\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAsC,OAAO;AAGzD,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAkC,IAAK;EACnE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,IAAID,MAAM,CAACJ,OAAO,EAAE;IAC3BI,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAGK,KAAK;EACxC;EACA;EACA,IAAID,MAAM,CAACI,IAAI,YAAYC,QAAQ,EAAE;IACnCL,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAG,qBAAqB;EACxD;EACA,OAAOI,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMM,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,WAA6B,IAAK;IAC9C,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC;IAC3D,OAAOC,QAAQ,CAACL,IAAI;EACtB,CAAC;EAEDO,MAAM,EAAE,MAAOH,WAA8B,IAAK;IAChD,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,cAAc,EAAEF,WAAW,CAAC;IAC5D,OAAOC,QAAQ,CAACL,IAAI;EACtB,CAAC;EAEDQ,OAAO,EAAE,MAAAA,CAAA,KAAY;IACnB,MAAMH,QAAQ,GAAG,MAAMhB,GAAG,CAACoB,GAAG,CAAC,YAAY,CAAC;IAC5C,OAAOJ,QAAQ,CAACL,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMU,OAAO,GAAG;EACrBC,QAAQ,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,KAAK;IACxC,MAAMR,QAAQ,GAAG,MAAMhB,GAAG,CAACoB,GAAG,CAAC,eAAeG,IAAI,UAAUC,KAAK,EAAE,CAAC;IACpE,OAAOR,QAAQ,CAACL,IAAI;EACtB,CAAC;EAEDc,OAAO,EAAE,MAAOC,EAAU,IAAK;IAC7B,MAAMV,QAAQ,GAAG,MAAMhB,GAAG,CAACoB,GAAG,CAAC,UAAUM,EAAE,EAAE,CAAC;IAC9C,OAAOV,QAAQ,CAACL,IAAI;EACtB,CAAC;EAEDgB,UAAU,EAAE,MAAOC,QAAiC,IAAK;IACvD,MAAMZ,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,QAAQ,EAAEW,QAAQ,CAAC;IACnD,OAAOZ,QAAQ,CAACL,IAAI;EACtB,CAAC;EAEDkB,UAAU,EAAE,MAAAA,CAAOH,EAAU,EAAEE,QAAiC,KAAK;IACnE,MAAMZ,QAAQ,GAAG,MAAMhB,GAAG,CAAC8B,GAAG,CAAC,UAAUJ,EAAE,EAAE,EAAEE,QAAQ,CAAC;IACxD,OAAOZ,QAAQ,CAACL,IAAI;EACtB,CAAC;EAEDoB,UAAU,EAAE,MAAOL,EAAU,IAAK;IAChC,MAAMV,QAAQ,GAAG,MAAMhB,GAAG,CAACgC,MAAM,CAAC,UAAUN,EAAE,EAAE,CAAC;IACjD,OAAOV,QAAQ,CAACL,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}